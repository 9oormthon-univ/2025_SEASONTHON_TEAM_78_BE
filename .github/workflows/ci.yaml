name: CI  # 워크플로우 이름

on:
  push:
    branches:
      - main  # main 브랜치에 푸시될 때 실행
  pull_request:
    branches:
      - main  # main 브랜치로 PR 생성 시 실행

jobs:
  build-test:
    runs-on: ubuntu-latest  # CI 작업이 실행될 환경 (Ubuntu 최신 버전)

    steps:
      # 1️⃣ 코드 저장소 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v3  # GitHub 저장소 코드를 가져옴

      # 2️⃣ JDK 21 설치
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin  # Temurin OpenJDK 사용
          java-version: 21       # Java 21 버전 설정

      # 3️⃣ .env 파일 생성 (Secrets에서 민감 정보 가져오기)
      - name: Create .env file
        run: |
          echo "DEV_DB_HOST=${{ secrets.DEV_DB_HOST }}" >> .env
          echo "DEV_DB_PORT=${{ secrets.DEV_DB_PORT }}" >> .env
          echo "DEV_DB_NAME=${{ secrets.DEV_DB_NAME }}" >> .env
          echo "DEV_DB_USER=${{ secrets.DEV_DB_USER }}" >> .env
          echo "DEV_DB_PASSWORD=${{ secrets.DEV_DB_PASSWORD }}" >> .env
          echo "DEV_JWT_SECRET=${{ secrets.DEV_JWT_SECRET }}" >> .env
          echo "DEV_KAKAO_CLIENT_ID=${{ secrets.DEV_KAKAO_CLIENT_ID }}" >> .env
          echo "DEV_KAKAO_CLIENT_SECRET=${{ secrets.DEV_KAKAO_CLIENT_SECRET }}" >> .env
          echo "DEV_KAKAO_REDIRECT_URI=${{ secrets.DEV_KAKAO_REDIRECT_URI }}" >> .env

      # 4️⃣ Gradle 캐시 활용하여 빌드 속도 개선
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      # 5️⃣ Gradle 빌드 수행 (테스트용 빌드)
      - name: Build with Gradle
        run: ./gradlew clean build --no-daemon

      # 6️⃣ 단위 테스트 실행
      - name: Run tests
        run: ./gradlew test --no-daemon
